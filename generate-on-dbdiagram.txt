CREATE TABLE Publishers (
    publisher_id SERIAL PRIMARY KEY,
    name_publisher VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    phone VARCHAR(50)
);

CREATE TABLE Authors (
    author_id SERIAL PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Categories (
    category_id SERIAL PRIMARY KEY,
    name_category VARCHAR(255) NOT NULL
);

CREATE TABLE Books (
    book_id SERIAL PRIMARY KEY,
	publisher_id INTEGER REFERENCES Publishers(publisher_id) ON DELETE SET NULL,
	category_id INTEGER REFERENCES Categories(category_id) ON DELETE SET NULL,
    book_name VARCHAR(255) NOT NULL,
    published_year INTEGER,
    deposit FLOAT,
    total_copies INTEGER,
    available_copies INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Users (
    user_id SERIAL PRIMARY KEY,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(50),
    address VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE Members (
    member_id SERIAL PRIMARY KEY,
    member_card_number VARCHAR(255) NOT NULL,
    user_id INTEGER REFERENCES Users(user_id) ON DELETE CASCADE
);

CREATE TABLE Employees (
    employee_id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    user_id INTEGER REFERENCES Users(user_id) ON DELETE CASCADE
);

CREATE TABLE Borrows (
    borrow_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES Users(user_id) ON DELETE CASCADE,
    book_id INTEGER REFERENCES Books(book_id) ON DELETE CASCADE,
    borrow_date DATE NOT NULL,
    due_date DATE NOT NULL,
    employee_id INTEGER REFERENCES Employees(employee_id) ON DELETE SET NULL,
    return_date DATE,
    status VARCHAR(50) CHECK (status IN ('BORROWING', 'PAID', 'OVERDUE'))
);

CREATE TABLE Fines (
    fines_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES Users(user_id) ON DELETE CASCADE,
    borrow_id INTEGER REFERENCES Borrows(borrow_id) ON DELETE CASCADE,
    amount FLOAT NOT NULL,
    fine_date DATE NOT NULL,
    status VARCHAR(50) CHECK (status IN ('unpaid', 'paid')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Author_Book (
    author_id INTEGER REFERENCES Authors(author_id) ON DELETE CASCADE,
    book_id INTEGER REFERENCES Books(book_id) ON DELETE CASCADE,
    PRIMARY KEY (author_id, book_id)
);

ALTER TABLE Members
ADD COLUMN status VARCHAR(50) CHECK (status IN ('active', 'inactive')) DEFAULT 'active';

-- Add status field to Employees table
ALTER TABLE Employees
ADD COLUMN status VARCHAR(50) CHECK (status IN ('active', 'inactive')) DEFAULT 'active';

ALTER TABLE Members
ADD CONSTRAINT unique_member_card_number UNIQUE (member_card_number);